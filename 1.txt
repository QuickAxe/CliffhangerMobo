//PWM pins are (3) -> used for a rc input
//5,6,9,10 and 11

// value up and down of midpoint to consider as dead zone 
#define deadzone 5

#define R_Rpwm 5
#define R_Lpwm 6

#define L_Rpwm 9
#define L_Lpwm 10

unsigned long now;  // timing variables to update  data at a regular interval
unsigned long rc_update;
const int channels = 2;  // specify the number of receiver channels
float RC_in[channels];   // an array to store the calibrated input from  receiver

int thr, dir;
int rVal, lVal;

void setup() {

  // making pins 9 and 10 as fast as 5 and 6
  // Pins D9 and D10 - 976 Hz
  TCCR1A = 0b00000001;  // 8bit
  TCCR1B = 0b00001011;   // x64 fast pwm

  pinMode(R_Lpwm, OUTPUT);
  pinMode(R_Rpwm, OUTPUT);
  pinMode(L_Lpwm, OUTPUT);
  pinMode(L_Rpwm, OUTPUT);


  setup_pwmRead();
  //Serial.begin(9600);
}

int sgn(int x) {
  return (x >= 0) ? 1 : -1;
}


void move() {

  thr = RC_in[1] * 100;
  dir = RC_in[0] * 100;

  // add corrected direction value here 
  // after gyro correction 

  rVal = thr + dir;
  lVal = thr - dir;

  //Serial.println();
  // Serial.print(" "); 
  // Serial.print(rVal);
  // Serial.print(", ");
  // Serial.print(lVal);
  //Serial.println();

  // rVal = (abs(rVal) > 100) ? sgn(rVal) * 100 : rVal;
  // lVal = (abs(lVal) > 100) ? sgn(lVal) * 100 : lVal;

  rVal = constrain(rVal, -100, 100);
  lVal = constrain(lVal, -100, 100);

  // Serial.print(" R= "); 
  // Serial.print(rVal);
  // Serial.print(",L=  ");
  // Serial.print(lVal);
  //Serial.println();

  writeMotor();
}

void writeMotor()
{
  if(rVal >= deadzone)
  {
    analogWrite(R_Lpwm, LOW);
    analogWrite(R_Rpwm, map(rVal, 0, 100, 0, 255));
    // Serial.print(" rVal = "); 
    // Serial.print(map(rVal, 0, 100, 0, 255));
  }
  else if(rVal <= -deadzone)
  {
    analogWrite(R_Rpwm, LOW);
    analogWrite(R_Lpwm, map(abs(rVal), 0, 100, 0, 255));  
    // Serial.print(" -rVal = "); 
    // Serial.print(map(abs(rVal), 0, 100, 0, 255));  
  }
  else 
  {
    analogWrite(R_Lpwm, LOW);
    analogWrite(R_Rpwm, LOW);
    // Serial.print(" rVal = centre ");
  }

  if(lVal >= deadzone)
  {
    analogWrite(L_Lpwm, LOW);
    analogWrite(L_Rpwm, map(lVal, 0, 100, 0, 255));
    // Serial.print(" lVal = "); 
    // Serial.print(map(lVal, 0, 100, 0, 255));

  }
  else if(lVal <= -deadzone)
  {
    analogWrite(L_Rpwm, LOW);
    analogWrite(L_Lpwm, map(abs(lVal), 0, 100, 0, 255)); 
    // Serial.print(" -lVal = "); 
    // Serial.print(map(abs(lVal), 0, 100, 0, 255));   
  }
  else 
  {
    analogWrite(L_Lpwm, LOW);
    analogWrite(L_Rpwm, LOW);
    // Serial.print(" lVal = centre ");
  }

      Serial.println();
}

void loop() {

  now = millis();

  if (RC_avail() || now - rc_update > 25) {  // if RC data is available  or 25ms has passed since last update (adjust to be equal or greater than the frame  rate of receiver)

    rc_update = now;

   //print_RCpwm();  // uncommment to print raw  data from receiver to serial

    for (int i = 0; i < channels; i++) {  // run through each RC channel
      int CH = i + 1;

      RC_in[i] = RC_decode(CH);  // decode receiver channel and apply failsafe

      //print_decimal2percentage(RC_in[i]);  // uncomment to print calibrated  receiver input (+-100%) to serial
    }
     //Serial.println();  // uncomment when printing calibrated receiver input to serial.
  }

  move();
 
}
